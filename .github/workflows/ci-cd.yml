name: CI/CD Pipeline for React Frontend

on:
  push:
    branches:
      - main

jobs:
  continuous-integration:
    name: Build & Test
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout code 
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm" # Enable dependency caching

      # 3. Install dependencies
      - name: Install Dependencies
        run: npm install

      # 4. Build the project
      - name: Build Project
        run: npm run build

      # 5. Archive Build Output
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/

  continuous-deployment:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    steps:
      # Step 1: Download Build Artifact
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./build

      # Step 2: Transfer Build to EC2
      - name: Deploy Build to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
          scp -o StrictHostKeyChecking=no -i github-ec2.pem -r ./build ${USER}@${HOST}:/tmp/build

      # Step 3: Deploy on EC2
      - name: Finalize Deployment on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} '
          echo "Starting deployment process..."

          # Ensure required dependencies are installed
          echo "Setting up environment..."
          sudo apt-get update && sudo apt-get install -y nginx

          # Define deployment variables
          DEPLOY_DIR="/var/www/html/react-frontend"
          BUILD_DIR="/tmp/build"

          # Clean the target deployment folder
          sudo rm -rf $DEPLOY_DIR/*  # Clear the existing deployment folder

          # Deploy the build artifact (move only the contents, not the folder itself)
          echo "Deploying files to $DEPLOY_DIR..."
          sudo mv $BUILD_DIR/* $DEPLOY_DIR/

          # Restart Nginx to apply changes
          echo "Restarting Nginx..."
          sudo systemctl restart nginx

          echo "Deployment completed successfully!"
          '

      # Step 4: Post-Deployment Health Check
      - name: Post-Deployment Health Check
        run: |
          RESPONSE=$(curl -o /dev/null -s -w "%{http_code}" http://${{ secrets.EC2_HOST }})
          if [ "$RESPONSE" != "200" ]; then
            echo "Health check failed with response code $RESPONSE."
            exit 0  # Temporarily allow failure
          else
            echo "Health check passed!"
          fi